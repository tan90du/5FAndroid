apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.autonavi.smarteye"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 120
        versionName "120"
        flavorDimensions "default"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
            }

            ndk {
                abiFilter('arm64-v8a')
            }
        }
    }

    signingConfigs {

        systemSign {
            keyAlias 'smarteye'
            keyPassword 'smarteye123456'
            storeFile file('system.keystore')
            storePassword 'smarteye123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 可自由切换签名
            signingConfig signingConfigs.systemSign

            ndk {
                abiFilter('arm64-v8a')
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            jniDebuggable true
            // 可自由切换签名
            signingConfig signingConfigs.systemSign
            ndk {
                abiFilter('arm64-v8a')
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {


    } // SocolJenkins



    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')

        }
    }
}

// 直接运行可生成带系统签名的apk
task signRelease (){
    dependsOn 'assembleRelease'
    doLast {
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                if (outputFile.name.contains("release")) {

                    String newName = getApkName()
                    // 直接运行安装apk  build/outputs/apk
                    def apkFilePath = getBuildDir().absolutePath + "/outputs/apk/release/"+newName+"-release.apk"
                    def apkDir = getBuildDir().absolutePath + "/outputs/apk/release"
                    println 'apkFilePath = ' + apkFilePath
                    def signDir = getProjectDir().absolutePath
                    println signDir

                    exec {
                        // 切换到sh文件所在的目录，执行脚本
                        workingDir signDir
                        // 执行shell脚本 "," 传参
                        commandLine "sh", signDir + "/sign/sign.sh", signDir, apkFilePath, apkDir + "/"+ newName+"-release-signed.apk"
                    }

                }
            }
        }
    }

}

dependencies {
    //    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile files('libs/commons-codec-1.6.jar')
    implementation 'com.ucweb.wpk:crashsdk:latest.release'
    testCompile 'junit:junit:4.12'
    implementation 'com.linkedin.dexmaker:dexmaker:2.25.0'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.5.0'
}
